package com.sample.androidsampleprjct.dao.lottery;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sample.androidsampleprjct.util.db.DaoSession;
import com.sample.androidsampleprjct.vo.SSQExtVO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LT_SSQ_REMOTE".
*/
public class SSQExtVODao extends AbstractDao<SSQExtVO, Long> {

    public static final String TABLENAME = "LT_SSQ_REMOTE";

    /**
     * Properties of entity SSQExtVO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Expect = new Property(1, String.class, "expect", false, "EXPECT");
        public final static Property OpenCode = new Property(2, String.class, "openCode", false, "OPEN_CODE");
        public final static Property OpenTime = new Property(3, String.class, "openTime", false, "OPEN_TIME");
        public final static Property OpenTimeStamp = new Property(4, String.class, "openTimeStamp", false, "OPEN_TIME_STAMP");
        public final static Property Flag = new Property(5, String.class, "flag", false, "FLAG");
        public final static Property RegDtm = new Property(6, java.util.Date.class, "regDtm", false, "REG_DTM");
    };


    public SSQExtVODao(DaoConfig config) {
        super(config);
    }
    
    public SSQExtVODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LT_SSQ_REMOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EXPECT\" TEXT," + // 1: expect
                "\"OPEN_CODE\" TEXT," + // 2: openCode
                "\"OPEN_TIME\" TEXT," + // 3: openTime
                "\"OPEN_TIME_STAMP\" TEXT," + // 4: openTimeStamp
                "\"FLAG\" TEXT," + // 5: flag
                "\"REG_DTM\" INTEGER);"); // 6: regDtm
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LT_SSQ_REMOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SSQExtVO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String expect = entity.getExpect();
        if (expect != null) {
            stmt.bindString(2, expect);
        }
 
        String openCode = entity.getOpenCode();
        if (openCode != null) {
            stmt.bindString(3, openCode);
        }
 
        String openTime = entity.getOpenTime();
        if (openTime != null) {
            stmt.bindString(4, openTime);
        }
 
        String openTimeStamp = entity.getOpenTimeStamp();
        if (openTimeStamp != null) {
            stmt.bindString(5, openTimeStamp);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(6, flag);
        }
 
        java.util.Date regDtm = entity.getRegDtm();
        if (regDtm != null) {
            stmt.bindLong(7, regDtm.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SSQExtVO readEntity(Cursor cursor, int offset) {
        SSQExtVO entity = new SSQExtVO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // expect
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // openCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // openTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // openTimeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // flag
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // regDtm
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SSQExtVO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpect(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpenCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpenTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpenTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFlag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegDtm(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SSQExtVO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SSQExtVO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
